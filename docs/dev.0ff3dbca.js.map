{"version":3,"sources":["../node_modules/entify/src/workers.js","../node_modules/entify/src/Entify.js","../src/tools/Log.js","../src/EGL.js","../src/index.js","../src/assemblages/system/CanvasWithPhysics2DStartup.js","../src/systems/Shape/Triangle.js","../src/systems/Canvas2d/MouseEvents.js","../src/systems/Canvas2d/index.js","../src/systems/Physics/Gravity.js","../src/systems/Physics/Velocity.js","../src/systems/World/index.js","../src/systems/Physics/Collision.js","../src/systems/Physics/index.js","../src/templates/2dCanvasWithPhysicsAndMouse.js","../src/components/CanvasColor.js","../src/components/CanvasTriangle.js","../src/components/WorldPosition.js","../src/components/PhysicsVelocity.js","../src/components/PhysicsGravity.js","../src/components/PhysicsCollision.js","../src/assemblages/entity/Character.js","dev.js"],"names":["Workers","Entify","globals","workerCount","destroyWorker","worker","terminate","createWorkers","numWorkers","src","workers","Array","i","Worker","doWork","data","allData","Promise","resolve","reject","onmessage","onerror","postMessage","chunk","fps","JSON","stringify","doInit","transferrables","tfer","undefined","init","doDistributedWork","elementsPerWorker","length","all","map","index","start","promise","slice","allEntities","Entity","id","Date","toString","Math","random","prototype","count","components","push","destroy","idx","findIndex","entity","splice","print","console","log","addComponent","component","name","removeComponent","componentName","Components","AllSystems","System","setName","work","setup","postSetup","cleanup","workify","workerScript","numberOfWorkers","getInitData","oldSetup","bind","forEach","initData","oldWork","then","results","entities","event","concat","oldCleanup","system","startSystems","loopSystems","playing","window","requestAnimationFrame","loop","restart","reset","pause","play","stamp","performance","now","newStamp","delta","deltaTime","deltaSeconds","round","Log","level","levels","levelName","setLevel","info","messages","warn","error","EGL","addStartSystem","addStartSystems","systems","addLoopSystem","addLoopSystems","stop","StartupSystem","Triangle","center","world_position","size","canvas_triangle","width","angle","points","distanceX","cos","PI","distanceY","sin","x","y","MouseEvents","canvas","callbacks","eventBus","addEventListener","layerX","layerY","button","mouseDown","mouseMove","mouseUp","Canvas2d","height","document","createElement","className","body","appendChild","context","getContext","alpha","mouseCallbacks","ctx","clearRect","color","canvas_color","beginPath","moveTo","lineTo","fillStyle","red","green","blue","fill","Gravity","Physics","newEntity","Object","assign","physics_gravity","falling","physics_velocity","diffTime","scaledVelocity","g","scale","fallDuration","Velocity","World","Collision","dotProduct","len","prod","arguments","argsLen","j","sum","crossProduct","a","b","scalarTripleProduct","c","vectorTripleProduct","physics_collision","xVel","yVel","outOfWorld","point","Template","CanvasWithPhysics2DStartup","CanvasColor","CanvasTriangle","WorldPosition","PhysicsVelocity","PhysicsGravity","magnitude","PhysicsCollision","mass","Character","position","velocity","posY","posX","velX","velY","colliderMass","rand","max","floor"],"mappings":"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","file":"dev.0ff3dbca.js","sourceRoot":"../dev","sourcesContent":["const Workers = {\n  Entify: {},\n  globals: {},\n  workerCount: 0,\n  async destroyWorker(worker) {\n    await worker.terminate();\n    Workers.workerCount--;\n    return;\n  },\n  createWorkers(numWorkers=5, src) {\n    let workers = new Array(numWorkers);\n    for (var i = 0; i < numWorkers; i++) {\n      workers[i] = new Worker(src);\n    }\n    Workers.workerCount += numWorkers;\n    return workers;\n  },\n  doWork(worker, data, allData) {\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({ \n        chunk: data,\n        allData,\n        fps: Workers.Entify.fps,\n        globals: JSON.stringify(Workers.globals),\n      });\n    });\n  },\n  doInit(worker, data, transferrables) {\n    const tfer = (transferrables) ? [transferrables] : undefined;\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({\n        init: true,\n        data,\n        transferrables,\n      }, tfer);\n    });\n  },\n  doDistributedWork(workers, data) {\n    // data size is always a multiple of the number of workers\n    var elementsPerWorker = data.length / workers.length;\n    return Promise.all(workers.map((worker, index) => {\n      const start = index * elementsPerWorker;\n      const promise = Workers.doWork(worker, data.slice(start, start+elementsPerWorker), data);\n      worker.promise = promise;\n      return promise;\n    }));\n  }\n};\n\nexport default Workers;","import Workers from './workers.js';\nconst Entify = {};\nWorkers.Entify = Entify;\n\n// namespace to store some stuff to get passed to all systems and their workers\nEntify.globals = {};\n\n// E\nEntify.allEntities = [];\nEntify.Entity = function () {\n  this.id = (+new Date()).toString(16) + \n  (Math.random() * 100000000 | 0).toString(16) +\n  Entify.Entity.prototype.count;\n  Entify.Entity.prototype.count++;\n  this.components = {};\n  Entify.allEntities.push(this);\n  return this;\n};\nEntify.Entity.prototype.count = 0;\n\nEntify.Entity.destroy = function(id) {\n  const idx = Entify.allEntities.findIndex((entity) => {\n    return entity.id === id;\n  });\n  if (idx) {\n    Entify.allEntities.splice(idx, 1);\n  }\n};\n\nEntify.Entity.prototype.print = function () {\n  console.log(JSON.stringify(this, null, 4));\n  return this;\n};\n\n// C\nEntify.Entity.prototype.addComponent = function ( component ){\n  this.components[component.name] = component;\n  return this;\n};\n\nEntify.Entity.prototype.removeComponent = function ( componentName ){\n  var name = componentName; // assume a string was passed in\n\n  if(typeof componentName === 'function'){ \n    name = componentName.prototype.name;\n  }\n\n  delete this.components[name];\n  return this;\n};\n\nEntify.Components = {}; \n\n// S\nEntify.AllSystems = [];\nEntify.System = function(name) {\n  this.setName(name);\n  this.work = () => {};\n  this.setup = () => {};\n  this.postSetup = () => {};\n  this.cleanup = () => {};\n  this.globals = Entify.globals; // systems can use this directly but just in case, make a reference\n  Entify.AllSystems.push(this);\n  return this;\n};\n\nEntify.System.prototype.setName = function(name) {\n  this.name = name;\n  return this;\n};\n\n// NOTE: this overrides the setup, cleanup and work functions\n// initData is thunk that returns an object in the form \n//   {data: data, transferrables: transferrables}\nEntify.System.prototype.workify = function(workerScript, numberOfWorkers, getInitData) {\n  const oldSetup = this.setup.bind(this);\n  this.setup = async () => {\n    await oldSetup();\n    if (this.workers && this.workers.length) {\n      this.workers.forEach((worker) => {\n        worker.terminate();\n      });\n      this.workers.length = 0;\n    }\n    const numWorkers = numberOfWorkers || Entify.globals.workerCount;\n    Workers.globals = Entify.globals;\n    this.workers = Workers.createWorkers(numWorkers, workerScript);\n    // in the event your worker(s) need initialization\n    if (getInitData) {\n      for (let worker of this.workers) {\n        const initData = getInitData();\n        if (initData) {\n          await Workers.doInit(worker, initData.data, initData.transferrables);\n        }\n      }\n      return;\n    } else {\n      return;\n    }\n  };\n\n  this.oldWork = this.work;\n  this.work = async () => {\n    await this.oldWork();\n    return await Workers.doDistributedWork(this.workers, Entify.allEntities)\n      .then((results) => {\n        let entities = [];\n        results.forEach((event) => {\n          entities = entities.concat(event.data);\n        });\n        Entify.allEntities = entities;\n        return results;\n      });\n  };\n\n  this.oldCleanup = this.cleanup;\n  this.cleanup = async () => {\n    await this.oldCleanup();\n    if (this.workers && this.workers.length) {\n      for (const worker of this.workers) {\n        await worker.promise;\n      }\n      for (const worker of this.workers) {\n        await Workers.destroyWorker(worker);\n      }\n      this.workers.length = 0;\n    }\n    return;\n  };\n};\n\nEntify.start = async () => {\n  for (const system of Entify.startSystems) {\n    await system.work(Entify.allEntities);\n  }\n  for (const system of Entify.loopSystems) {\n    await system.setup();\n  }\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.restart = async () => {\n  Entify.playing = false;\n  await Entify.reset();\n  window.requestAnimationFrame(Entify.start);\n};\n\nEntify.pause = () => {\n  Entify.playing = false;\n};\n\nEntify.play = () => {\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.reset = async () => {\n  for (const system of Entify.startSystems) {\n    await system.cleanup();\n  }\n  for (const system of Entify.loopSystems) {\n    await system.cleanup();\n  }\n  Entify.allEntities.length = 0;\n  return;\n};\n\n// now do work with the update loops\nlet stamp = performance.now();\n\nEntify.loop = async () => {\n  for (let system of Entify.loopSystems) {\n    await system.work(Entify.allEntities);\n  }\n  const newStamp = performance.now();\n  const delta = (newStamp - stamp);\n  Entify.deltaTime = delta;\n  const deltaSeconds = delta / 1000;\n  Entify.fps = Math.round(1/deltaSeconds);\n  stamp = newStamp;\n  if (Entify.playing) {\n    window.requestAnimationFrame(Entify.loop);\n  }\n};\n\nexport default Entify;","const Log = {};\n\nLog.levels = [\n  'Error',\n  'Warn',\n  'Info'\n];\n\nLog.setLevel = (level) => {\n  Log.level = level;\n  if (level > Log.levels.length - 1) {\n    Log.levelName = 'High';\n  } else if (Log.level < 0) {\n    Log.levelName = 'Off';\n  } else {\n    Log.levelName = Log.levels[level];\n  }\n};\n\nLog.setLevel(0); // errors only by default\n\nLog.info = (...messages) => {\n  if (Log.level >= 2) {\n    // eslint-disable-next-line no-console\n    console.info('%c Info', 'color:#7e7', messages);\n  }\n};\n\nLog.warn = (...messages) => {\n  if (Log.level >= 1) {\n    // eslint-disable-next-line no-console\n    console.info('%c Warn', 'color:#ee7', messages);\n  }\n};\n\nLog.error = (...messages) => {\n  if (Log.level >= 0) {\n    // eslint-disable-next-line no-console\n    console.info('%c Error', 'color:#e77', messages);\n  }\n};\n\nexport default Log;","import Entify from 'entify';\nimport Log from './tools/Log.js';\n\nLog.level = 5;\n\nconst EGL = {};\n\nEntify.startSystems = [];\nEntify.loopSystems = [];\n\nEGL.addStartSystem = (system) => {\n  Entify.startSystems.push(system);\n};\n\nEGL.addStartSystems = (systems) => {\n  Entify.startSystems = Entify.startSystems.concat(systems);\n};\n\nEGL.addLoopSystem = (system) => {\n  Entify.loopSystems.push(system);\n};\n\nEGL.addLoopSystems = (systems) => {\n  Entify.loopSystems = Entify.loopSystems.concat(systems);\n};\n\nEGL.start = () => {\n  Log.info('starting systems');\n  Entify.start();\n};\n\nEGL.stop = () => {\n  Log.info('stopping systems');\n  Entify.pause();\n};\n\nEGL.play = () => {\n  Log.info('playing systems');\n  Entify.play();\n};\n\nEGL.reset = () => {\n  Log.info('Resetting systems');\n  Entify.restart();\n};\n\nexport default EGL;","import EGL from './EGL.js';\n\nexport default EGL;","import Entify from 'entify';\n\nconst StartupSystem = new Entify.System('CanvasWithPhysics2DStartup');\n\nStartupSystem.work = () => {\n  // TODO: set up some stuff\n};\n\nexport default StartupSystem;","const Triangle = function(entity) {\n  const center = entity.components.world_position;\n  const size = entity.components.canvas_triangle.width;\n  const angle = entity.components.canvas_triangle.angle;\n  //  𝑥 = D * cos 𝜃\n  //  𝑦 = D * sin 𝜃.\n  // 360 / 3 = 120\n  let points = [];\n  const angles = [0 + angle, 120 + angle, 240 + angle];\n  angles.forEach((angle, idx) => {\n    const distanceX = size * Math.cos(angle * Math.PI / 180); // convert to degrees\n    const distanceY = size * Math.sin(angle * Math.PI / 180); // and again\n    points[idx] = [center.x + distanceX, center.y + distanceY];\n  });\n  return points;\n};\n\nexport default Triangle;","const MouseEvents = function(canvas, callbacks, eventBus) {\n  canvas.addEventListener('mousedown', (event) => {\n    eventBus.push(['mousedown', event.layerX, event.layerY, event.button]);\n    if (callbacks.mouseDown) {\n      callbacks.mouseDown(event);\n    }\n  });\n  canvas.addEventListener('mousemove', (event) => {\n    eventBus.push(['mousemove', event.layerX, event.layerY, event.button]);\n    if (callbacks.mouseMove) {\n      callbacks.mouseMove(event);\n    }\n  });\n  canvas.addEventListener('mouseup', () => {\n    eventBus.push(['mouseup', event.layerX, event.layerY, event.button]);\n    if (callbacks.mouseUp) {\n      callbacks.mouseUp(event);\n    }\n  });\n};\n\nexport default MouseEvents;","import Entify from 'entify';\nimport Triangle from '../Shape/Triangle.js';\nimport MouseEvents from './MouseEvents.js';\n\nconst Canvas2d = new Entify.System('canvas2d');\n\nCanvas2d.width = 800;\nCanvas2d.height = 600;\n\nCanvas2d.setup = () => {\n  // inject canvas into DOM\n  const canvas = document.createElement('canvas');\n  canvas.width = Canvas2d.width;\n  canvas.height = Canvas2d.height;\n  canvas.id = 'eglCanvas'; // for making this easy to deal with in dom\n  canvas.className = 'eglCanvas'; // for styling\n  document.body.appendChild(canvas);\n  Canvas2d.context = canvas.getContext('2d', { alpha: false });\n  Canvas2d.canvas = canvas;\n  MouseEvents(canvas, Canvas2d.mouseCallbacks, []);\n};\n\nCanvas2d.work = (entities) => {\n  const canvas = Canvas2d.canvas;\n  const ctx = Canvas2d.context;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  // loop through objects that need to be rendered\n  entities.forEach((entity) => {\n    if (entity.components.canvas_triangle && entity.components.world_position) {\n      const points = Triangle(entity);\n      const color = entity.components.canvas_color;\n      ctx.beginPath();\n      ctx.moveTo(points[0][0], points[0][1]);\n      ctx.lineTo(points[1][0], points[1][1]);\n      ctx.lineTo(points[2][0], points[2][1]);\n      ctx.fillStyle = `rgb(${color.red}, ${color.green}, ${color.blue})`;\n      ctx.fill();\n    }\n  });\n};\n\nexport default Canvas2d;","const Gravity = function(entity, deltaTime, Physics) {\n  const newEntity = Object.assign({}, entity);\n  if (!newEntity.components.physics_gravity.falling) {\n    // TODO: figure out how to separate this from other forms of velocity\n    newEntity.components.physics_velocity.x = 0;\n    newEntity.components.physics_velocity.y = 0;\n    return newEntity;\n  }\n  const diffTime = (deltaTime) ? deltaTime / 1000: 0;\n  const scaledVelocity = Physics.g * Physics.scale * diffTime;\n  newEntity.components.physics_velocity.y += scaledVelocity;\n  newEntity.components.physics_gravity.fallDuration += diffTime;\n  return newEntity;\n};\n\nexport default Gravity;","const Velocity = function(entity) {\n  const newEntity = Object.assign({}, entity);\n  newEntity.components.world_position.x += entity.components.physics_velocity.x;\n  newEntity.components.world_position.y += entity.components.physics_velocity.y;\n  return newEntity;\n};\n\nexport default Velocity;","import Entify from 'entify';\n\n// physics will modify the position of the item before it gets here based on velocity\n// and gravity calculations, this just paints them\n\nconst World = new Entify.System('World');\n\nWorld.setup = () => {\n  World.height = 600;\n  World.width = 800;\n};\n\nWorld.work = (entities) => {\n  // for now this does nothing,\n  // but in the future this is where we'll map the world position to the camera position\n  // so the canvas knows what to draw\n};\n\nexport default World;","import World from '../World';\nimport Triangle from '../Shape/Triangle.js';\n\nfunction dotProduct() {\n  var len = arguments[0] && arguments[0].length;\n  var argsLen = arguments.length;\n  var i, j = len;\n  var prod, sum = 0;\n \n  // If no arguments supplied, return undefined\n  if (!len) {\n    return;\n  }\n \n  // If all vectors not same length, return undefined\n  i = argsLen;\n  while (i--) {\n \n    if (arguments[i].length != len) {\n      return;  // return undefined\n    }\n  }\n \n  // Sum terms\n  while (j--) {\n    i = argsLen;\n    prod = 1;\n \n    while (i--) {\n      prod *= arguments[i][j];\n    }\n    sum += prod;\n  }\n  return sum;\n}\n \nfunction crossProduct(a, b) {\n \n  // Check lengths\n  if (a.length != 3 || b.length != 3) {\n    return;\n  }\n \n  return [a[1]*b[2] - a[2]*b[1],\n    a[2]*b[0] - a[0]*b[2],\n    a[0]*b[1] - a[1]*b[0]];\n \n}\n \nfunction scalarTripleProduct(a, b, c) {\n  return dotProduct(a, crossProduct(b, c));\n}\n \nfunction vectorTripleProduct(a, b, c) {\n  return crossProduct(a, crossProduct(b, c));\n}\n\nconst Collision = function(entity, entities) {\n  const newEntity = Object.assign({}, entity);\n  // TODO: find all other entities with collision and check for collision\n  // TODO: find world bounds and check for collision\n\n  if (newEntity.components.physics_collision) {\n    // TODO: make it so there's a parameter that tells which shape function to use to get points\n    if (newEntity.components.canvas_triangle) {\n      const points = Triangle(newEntity);\n      const xVel = newEntity.components.physics_velocity.x;\n      const yVel = newEntity.components.physics_velocity.y;\n    \n      if (newEntity.components.physics_gravity && newEntity.components.physics_gravity.falling) {\n        // TODO: implement line-line collision on four lines of stage rather than doing this, ala\n        // https://gamedev.stackexchange.com/questions/16827/2d-game-collision-response-sat-minimum-displacement-along-a-given-axis\n        \n        let outOfWorld = false;\n        let vertical = false; // false means x plane, true means y plane\n        points.forEach((point) => {\n          if (point[0] + xVel >= World.width)  {\n            outOfWorld = true;\n            vertical = false;\n          } else if (point[1] + yVel >= World.height) {\n            outOfWorld = true;\n            vertical = true;\n          }\n        });\n        if (outOfWorld) {\n          // TODO : clamp to side that it fell out of\n          // will require finding center of shape at point where it would be flush with world\n          newEntity.components.physics_gravity.falling = false;\n        }\n      }\n\n    }\n  }\n  return newEntity;\n};\n\nexport default Collision;","import Entify from 'entify';\nimport Gravity from './Gravity.js';\nimport Velocity from './Velocity.js';\nimport Collision from './Collision.js';\n\nconst Physics = new Entify.System('Physics');\n\nPhysics.scale = 1; // pixels to 1 meter\n\nPhysics.g = 9.807; // meters per second per second\n\nPhysics.setup = () => {\n};\n\nPhysics.work = (entities) => {\n  entities.forEach((entity) => {\n    if (entity.components.physics_collision) {\n      entity = Collision(entity, entities); \n    }\n    if (entity.components.physics_gravity && entity.components.world_position) {\n      entity = Gravity(entity, Entify.deltaTime, Physics);\n    }\n    if (entity.components.physics_velocity && entity.components.world_position) {\n      entity = Velocity(entity);\n    }\n  });\n};\n\nexport default Physics;","import EGL from '../index.js';\nimport CanvasWithPhysics2DStartup from '../assemblages/system/CanvasWithPhysics2DStartup.js';\nimport Canvas2d from '../systems/Canvas2d';\nimport Physics from '../systems/Physics';\nimport World from '../systems/World';\n\nconst Template = function(mouseCallbacks) {\n  Canvas2d.mouseCallbacks = mouseCallbacks;\n  EGL.addStartSystem(CanvasWithPhysics2DStartup);\n  EGL.addLoopSystems([Canvas2d, Physics, World]);\n};\n\nexport default Template;\n","// for now only make equilateral triangles\nconst CanvasColor = function(red = 0, green = 0, blue = 0) {\n  this.red = red;\n  this.green = green;\n  this.blue = blue;\n};\n\n// triangles will also have a world position, but the canvas draw system\n// determines the center and rotates the points around \n// a circle from that\n\nCanvasColor.prototype.name = 'canvas_color';\n\nexport default CanvasColor;","// for now only make equilateral triangles\nconst CanvasTriangle = function(width = 2, angle = 0) {\n  this.width = width;\n  this.angle = angle;\n};\n\nCanvasTriangle.prototype.name = 'canvas_triangle';\n\nexport default CanvasTriangle;","const WorldPosition = function(x = 0, y = 0) {\n  // anything that exists in the world has a world position. for now we can \n  // make the world and camera 1:1. in the future it should move\n  this.x = x;\n  this.y = y;\n};\n\nWorldPosition.prototype.name = 'world_position';\n\nexport default WorldPosition;","const PhysicsVelocity = function(x = 0, y = 0) {\n  this.x = 0;\n  this.y = 0;\n  // two dimensionsal universe, easier to map to complementary velocities \n  // rather than magnitude and angle: but we may convert to vector math later\n};\n\nPhysicsVelocity.prototype.name = 'physics_velocity';\n\nexport default PhysicsVelocity;","const PhysicsGravity = function(magnitude = 1) {\n  this.magnitude = 1;\n  this.fallDuration = 0;\n  this.falling = true;\n};\n\n// whenever velocity is calculated we'll also need to determine the impact of gravity\n\nPhysicsGravity.prototype.name = 'physics_gravity';\n\nexport default PhysicsGravity;","const PhysicsCollision = function(mass = 1) {\n  this.mass = mass;\n};\n\n// whenever velocity is calculated we'll also need to determine the impact of gravity\n\nPhysicsCollision.prototype.name = 'physics_collision';\n\nexport default PhysicsCollision;","import Entify from 'entify';\nimport CanvasColor from '../../components/CanvasColor.js';\nimport CanvasTriangle from '../../components/CanvasTriangle.js';\nimport WorldPosition from '../../components/WorldPosition.js';\nimport PhysicsVelocity from '../../components/PhysicsVelocity.js';\nimport PhysicsGravity from '../../components/PhysicsGravity.js';\nimport PhysicsCollision from '../../components/PhysicsCollision.js';\n\nconst Character = function(size, angle, color, position, velocity, mass) {\n  let entity = new Entify.Entity();\n  let red = (color && color.red > -1) ? color.red : 255;\n  let green = (color && color.green > -1) ? color.green : 255;\n  let blue = (color && color.blue > -1) ? color.blue : 255;\n  let posY = (position && position.y) ? position.y : 0;\n  let posX = (position && position.x) ? position.x : 0;\n  let velX = (velocity && velocity.x) ? velocity.x : 0;\n  let velY = (velocity && velocity.y) ? velocity.y : 0;\n  let colliderMass = mass || 0;\n  entity.addComponent(new CanvasColor(red, green, blue));\n  entity.addComponent(new CanvasTriangle(size, angle));\n  entity.addComponent(new WorldPosition(posX,posY));\n  entity.addComponent(new PhysicsVelocity(velX, velY));\n  entity.addComponent(new PhysicsGravity(1));\n  entity.addComponent(new PhysicsCollision(colliderMass));\n  return entity;\n};\n\nexport default Character;\n","import EGL from '../src/index.js';\nimport template from '../src/templates/2dCanvasWithPhysicsAndMouse.js';\nimport Character from '../src/assemblages/entity/Character.js';\nconst mouseCallbacks = {\n  mouseDown: (event) => {\n    const rand = (max) => Math.floor(Math.random() * Math.floor(max));\n    new Character(20,\n      rand(360),\n      {\n        red: rand(255), \n        green: rand(255), \n        blue: rand(255),\n      },\n      {\n        x: event.layerX,\n        y: event.layerY\n      });\n    return;\n  }\n};\n\ntemplate(mouseCallbacks);\n\nEGL.start();\n// EGL.stop();\n// EGL.play();\n// EGL.reset();"]}