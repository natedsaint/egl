{"version":3,"sources":["../node_modules/entify/src/workers.js","../node_modules/entify/src/Entify.js","../src/tools/Log.js","../src/EGL.js","../src/index.js"],"names":["Workers","Entify","globals","workerCount","destroyWorker","worker","terminate","createWorkers","numWorkers","src","workers","Array","i","Worker","doWork","data","allData","Promise","resolve","reject","onmessage","onerror","postMessage","chunk","fps","JSON","stringify","doInit","transferrables","tfer","undefined","init","doDistributedWork","elementsPerWorker","length","all","map","index","start","promise","slice","allEntities","Entity","id","Date","toString","Math","random","prototype","count","components","push","destroy","idx","findIndex","entity","splice","print","console","log","addComponent","component","name","removeComponent","componentName","Components","AllSystems","System","setName","work","setup","postSetup","cleanup","workify","workerScript","numberOfWorkers","getInitData","oldSetup","bind","forEach","initData","oldWork","then","results","entities","event","concat","oldCleanup","system","startSystems","loopSystems","playing","window","requestAnimationFrame","loop","restart","reset","pause","play","stamp","performance","now","newStamp","delta","deltaTime","deltaSeconds","round","Log","level","levels","levelName","setLevel","info","messages","warn","error","EGL","addStartSystem","addStartSystems","systems","addLoopSystem","addLoopSystems","stop"],"mappings":"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","file":"src.c1e70db6.js","sourceRoot":"../dev","sourcesContent":["const Workers = {\n  Entify: {},\n  globals: {},\n  workerCount: 0,\n  async destroyWorker(worker) {\n    await worker.terminate();\n    Workers.workerCount--;\n    return;\n  },\n  createWorkers(numWorkers=5, src) {\n    let workers = new Array(numWorkers);\n    for (var i = 0; i < numWorkers; i++) {\n      workers[i] = new Worker(src);\n    }\n    Workers.workerCount += numWorkers;\n    return workers;\n  },\n  doWork(worker, data, allData) {\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({ \n        chunk: data,\n        allData,\n        fps: Workers.Entify.fps,\n        globals: JSON.stringify(Workers.globals),\n      });\n    });\n  },\n  doInit(worker, data, transferrables) {\n    const tfer = (transferrables) ? [transferrables] : undefined;\n    return new Promise((resolve, reject) => {\n      worker.onmessage = resolve;\n      worker.onerror = reject;\n      worker.postMessage({\n        init: true,\n        data,\n        transferrables,\n      }, tfer);\n    });\n  },\n  doDistributedWork(workers, data) {\n    // data size is always a multiple of the number of workers\n    var elementsPerWorker = data.length / workers.length;\n    return Promise.all(workers.map((worker, index) => {\n      const start = index * elementsPerWorker;\n      const promise = Workers.doWork(worker, data.slice(start, start+elementsPerWorker), data);\n      worker.promise = promise;\n      return promise;\n    }));\n  }\n};\n\nexport default Workers;","import Workers from './workers.js';\nconst Entify = {};\nWorkers.Entify = Entify;\n\n// namespace to store some stuff to get passed to all systems and their workers\nEntify.globals = {};\n\n// E\nEntify.allEntities = [];\nEntify.Entity = function () {\n  this.id = (+new Date()).toString(16) + \n  (Math.random() * 100000000 | 0).toString(16) +\n  Entify.Entity.prototype.count;\n  Entify.Entity.prototype.count++;\n  this.components = {};\n  Entify.allEntities.push(this);\n  return this;\n};\nEntify.Entity.prototype.count = 0;\n\nEntify.Entity.destroy = function(id) {\n  const idx = Entify.allEntities.findIndex((entity) => {\n    return entity.id === id;\n  });\n  if (idx) {\n    Entify.allEntities.splice(idx, 1);\n  }\n};\n\nEntify.Entity.prototype.print = function () {\n  console.log(JSON.stringify(this, null, 4));\n  return this;\n};\n\n// C\nEntify.Entity.prototype.addComponent = function ( component ){\n  this.components[component.name] = component;\n  return this;\n};\n\nEntify.Entity.prototype.removeComponent = function ( componentName ){\n  var name = componentName; // assume a string was passed in\n\n  if(typeof componentName === 'function'){ \n    name = componentName.prototype.name;\n  }\n\n  delete this.components[name];\n  return this;\n};\n\nEntify.Components = {}; \n\n// S\nEntify.AllSystems = [];\nEntify.System = function(name) {\n  this.setName(name);\n  this.work = () => {};\n  this.setup = () => {};\n  this.postSetup = () => {};\n  this.cleanup = () => {};\n  this.globals = Entify.globals; // systems can use this directly but just in case, make a reference\n  Entify.AllSystems.push(this);\n  return this;\n};\n\nEntify.System.prototype.setName = function(name) {\n  this.name = name;\n  return this;\n};\n\n// NOTE: this overrides the setup, cleanup and work functions\n// initData is thunk that returns an object in the form \n//   {data: data, transferrables: transferrables}\nEntify.System.prototype.workify = function(workerScript, numberOfWorkers, getInitData) {\n  const oldSetup = this.setup.bind(this);\n  this.setup = async () => {\n    await oldSetup();\n    if (this.workers && this.workers.length) {\n      this.workers.forEach((worker) => {\n        worker.terminate();\n      });\n      this.workers.length = 0;\n    }\n    const numWorkers = numberOfWorkers || Entify.globals.workerCount;\n    Workers.globals = Entify.globals;\n    this.workers = Workers.createWorkers(numWorkers, workerScript);\n    // in the event your worker(s) need initialization\n    if (getInitData) {\n      for (let worker of this.workers) {\n        const initData = getInitData();\n        if (initData) {\n          await Workers.doInit(worker, initData.data, initData.transferrables);\n        }\n      }\n      return;\n    } else {\n      return;\n    }\n  };\n\n  this.oldWork = this.work;\n  this.work = async () => {\n    await this.oldWork();\n    return await Workers.doDistributedWork(this.workers, Entify.allEntities)\n      .then((results) => {\n        let entities = [];\n        results.forEach((event) => {\n          entities = entities.concat(event.data);\n        });\n        Entify.allEntities = entities;\n        return results;\n      });\n  };\n\n  this.oldCleanup = this.cleanup;\n  this.cleanup = async () => {\n    await this.oldCleanup();\n    if (this.workers && this.workers.length) {\n      for (const worker of this.workers) {\n        await worker.promise;\n      }\n      for (const worker of this.workers) {\n        await Workers.destroyWorker(worker);\n      }\n      this.workers.length = 0;\n    }\n    return;\n  };\n};\n\nEntify.start = async () => {\n  for (const system of Entify.startSystems) {\n    await system.work(Entify.allEntities);\n  }\n  for (const system of Entify.loopSystems) {\n    await system.setup();\n  }\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.restart = async () => {\n  Entify.playing = false;\n  await Entify.reset();\n  window.requestAnimationFrame(Entify.start);\n};\n\nEntify.pause = () => {\n  Entify.playing = false;\n};\n\nEntify.play = () => {\n  Entify.playing = true;\n  window.requestAnimationFrame(Entify.loop);\n};\n\nEntify.reset = async () => {\n  for (const system of Entify.startSystems) {\n    await system.cleanup();\n  }\n  for (const system of Entify.loopSystems) {\n    await system.cleanup();\n  }\n  Entify.allEntities.length = 0;\n  return;\n};\n\n// now do work with the update loops\nlet stamp = performance.now();\n\nEntify.loop = async () => {\n  for (let system of Entify.loopSystems) {\n    await system.work(Entify.allEntities);\n  }\n  const newStamp = performance.now();\n  const delta = (newStamp - stamp);\n  Entify.deltaTime = delta;\n  const deltaSeconds = delta / 1000;\n  Entify.fps = Math.round(1/deltaSeconds);\n  stamp = newStamp;\n  if (Entify.playing) {\n    window.requestAnimationFrame(Entify.loop);\n  }\n};\n\nexport default Entify;","const Log = {};\n\nLog.levels = [\n  'Error',\n  'Warn',\n  'Info'\n];\n\nLog.setLevel = (level) => {\n  Log.level = level;\n  if (level > Log.levels.length - 1) {\n    Log.levelName = 'High';\n  } else if (Log.level < 0) {\n    Log.levelName = 'Off';\n  } else {\n    Log.levelName = Log.levels[level];\n  }\n};\n\nLog.setLevel(0); // errors only by default\n\nLog.info = (...messages) => {\n  if (Log.level >= 2) {\n    // eslint-disable-next-line no-console\n    console.info('%c Info', 'color:#7e7', messages);\n  }\n};\n\nLog.warn = (...messages) => {\n  if (Log.level >= 1) {\n    // eslint-disable-next-line no-console\n    console.info('%c Warn', 'color:#ee7', messages);\n  }\n};\n\nLog.error = (...messages) => {\n  if (Log.level >= 0) {\n    // eslint-disable-next-line no-console\n    console.info('%c Error', 'color:#e77', messages);\n  }\n};\n\nexport default Log;","import Entify from 'entify';\nimport Log from './tools/Log.js';\n\nLog.level = 5;\n\nconst EGL = {};\n\nEntify.startSystems = [];\nEntify.loopSystems = [];\n\nEGL.addStartSystem = (system) => {\n  Entify.startSystems.push(system);\n};\n\nEGL.addStartSystems = (systems) => {\n  Entify.startSystems = Entify.startSystems.concat(systems);\n};\n\nEGL.addLoopSystem = (system) => {\n  Entify.loopSystems.push(system);\n};\n\nEGL.addLoopSystems = (systems) => {\n  Entify.loopSystems = Entify.loopSystems.concat(systems);\n};\n\nEGL.start = () => {\n  Log.info('starting systems');\n  Entify.start();\n};\n\nEGL.stop = () => {\n  Log.info('stopping systems');\n  Entify.pause();\n};\n\nEGL.play = () => {\n  Log.info('playing systems');\n  Entify.play();\n};\n\nEGL.reset = () => {\n  Log.info('Resetting systems');\n  Entify.restart();\n};\n\nexport default EGL;","import EGL from './EGL.js';\n\nexport default EGL;"]}